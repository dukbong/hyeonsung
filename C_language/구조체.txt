C언어의 자료형

기본 자료형 : int, char, double, void
파생 자료형 : 배열(동일한 종류의 데이터 모임), 포인터, 구조체, 고용체
사용자정의 자료형 : typedef, enum

구조체란?
    - 여러 개의 변수들을 묶어서 만든 새로운 자료형
    - 객체 지향 프로그램에서의 클래스의 모체임
    - 여러 개의 서로 다른 자료형들을 하나로 묶은것
    - 기본구조
        struct student{
            int num;
            char name[20];
            double grade;
        };

        struct 구조체명{  ==> 구조체 정의하는 방법
            구조체멤버1;
            구조체멤버2;
        };
    
    - 구조체 변수 선언하는 방법
        - 1번
        int main(){
            struct 구조체명 변수명;
            ...
        }

        - 2번
        struct 구조체명{
            구조체멤버1;
        }변수명;
        ⭐ 변수명이 있으면 구조체명 생략 가능하다.
        ⭐ main 함수 내에서 구조체 변수를 만들지 못한다.

    - 구조체끼리는 비교가 불가능하다.
        - 단 구조체 멤버끼리는 비교가 가능하다.

구조체에 포인터 사용

    struct student{
        int num;
        char name[20];
    }
    int main(void){
        struct student s1 = {10,"jang"};
        struct student *p; // 포인터 선언
        p = &s1; // p에 s1 주소를 넣는다.

        printf("학번은 %d 이름은 %s", s1.num. s1.name);
        printf("학번은 %d 이름은 %s", (*p).num. (*p).name);
        return 0;
    }

    struct student{
        int num;
        char name[20];
        struct date *d; // 포인터
    }
    struct date{
        int year;
        int month;
    }
    // 구조체 안에 포인터를 사용하면 메모리 사용을 줄일 수 있다.


구조체와 함수
구조체를 함수의 인수로 사용 가능하다.
구조체를 함수에서 반환값으로 반환 가능하다.

값에 의한 호출 ( 함수 )
    - 구조체 변수의 모든 내용이 복사되어 함수로 전달 / 반환
    - 구조체의 크기가 클 경우 상당한 시간이 소요된다.
    - 구조체의 포인터를 사용하는것이 바람직하다.
        - 단점으로는 값이 바뀔수 있다.
            - 방지를 위해 const로 상수로 만들어주면 된다.